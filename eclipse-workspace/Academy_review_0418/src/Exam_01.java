class Exam_01 {
	public static void main(String[] args) {
		사람 a사람 = new 사람();
		원숭이 a원숭이 = new 원숭이();
		
		// 문제 1 : 아래 줄의 코드가 되는 이유 설명
		동물 a동물 = a원숭이;
		
		// - 상황 : 원숭이 클래스가 동물 클래스를 상속받은 상황이다.
		// - 상황 : 자바는 이제 원숭이가 동물 이라는 것을 안다.
		// - 정답 1 : 동물리코몬으로 원숭이 객체를 조종해도 괜찮기 때문에 가능하다.
		// - 정답 2 : 원숭이리모콘이 동물리모콘으로 자동으로 바뀌어도(자동형변환) 문제가 없기 때문에 가능하다.
		// - 정답 3 : `a동물` 변수는 오직 동물객체랑 연결될 수 있다. 그런데 지금 원숭이 객체를 연결시키려고 하고 있다. 원숭이 객체는 동물객체이기 때문에 가능하다.
		
		원숭이 a원숭이2 = null; // null 은 쓰레기 리모콘이라는 뜻
		
		// 문제 2 : 아래 줄의 코드가 안되는 이유 설명
		// a원숭이2 = a동물;
		
		// - 상황 : 동물리모콘은 원숭이 객체를 가리키고 있다.
		// - 상황 : 그렇지만 자바는 동물리모콘에 연결된 것이 동물객체라는 것은 알지만 그게 사람객체인지 동물객체인지는 알 수 없다.
		// - 상황 : `a원숭이2` 변수는 오직 원숭기 객체랑만 연결될 수 있다.
		// - 상황 : 동물리모콘이 원숭이 리모콘으로 변해야 하는 상황이다.
		// - 상황 : 기존의 리모콘에 `원숭이묘기를하다` 버튼을 추가로 넣어야 하는 상황이다.
		// - 정답 1 : 실제로 동물리모콘은 원숭이를 가리킨다. 하지만 자바는 그 사실을 알지 못하고 동물리모콘에 원숭이 아닌 다른 객체(예를들면 사람객체)가 연결되어 있지는 않을까 두려워 한다. 그렇기 때문에 임의로 동물리모콘에 `원숭이묘기를하다` 버튼을 추가하지 못한다.
		// - 정답 2
		// -- `a동물` 변수가 `a원숭이2` 변수에게 말한다.
		// -- "`a원숭이2`야 내가 지금 어떤 객체랑 연결되어 있는데, 너도 나랑 같은 객체와 연결되자!"
		// -- `a원숭이2` 변수는 말합니다.
		// -- "나는 오직 원숭이 객체랑만 연결될 수 있는데, 너가 연결되어 있는 객체가 원숭이객체 맞니?"
		// -- `a동물` 변수는 말합니다.
		// -- "나랑 연결되어 있는 객체가 동물객체인건 확실한데.. 그게 원숭이객체 인지 사람객체인지 고릴라객체인지는 알 수 없어. 그래도 원숭이객체일 확률이 있긴 하니까, 그냥 진행하지 않을래?"
		// -- `a원숭이2`가 말합니다.
		// -- "내가 지금 이렇게 넘어가면 프로그램을 실행하는 도중에 문제가 발생할 수 도 있어, 너도 알다시피 어떤 문제든 런타임보다 컴파일 타임에 발생하는게 좋잖아? 아무튼 이건 내선에서는 정할 수 없는 문제야. 일단 내가 여기서 에러를 발생시키면 개발자 이 문제를 인지하고, 최종적으로 넣을지 말지 결정해 주겠지. 일단 오류를 발생시킬게. 미안;;"
		
		// 문제 3 : 아래 줄의 되는 이유 설명
		a원숭이2 = (원숭이)a동물;
		
		// - 상황 : 동물리모콘은 원숭이 객체를 가리키고 있다.
		// - 상황 : 그렇지만 자바는 동물리모콘에 연결된 것이 동물객체라는 것은 알지만 그게 사람객체인지 동물객체인지는 알 수 없다.
		// - 상황 : `a원숭이2` 변수는 오직 원숭기 객체랑만 연결될 수 있다.
		// - 상황 : 동물리모콘이 원숭이 리모콘으로 변해야 하는 상황이다.
		// - 상황 : 기존의 리모콘에 `원숭이묘기를하다` 버튼을 추가로 넣어야 하는 상황이다.
		// - 정답 1 : 실제로 동물리모콘은 원숭이를 가리킨다. 하지만 자바는 그 사실을 알지 못하고 동물리모콘에 원숭이 아닌 다른 객체(예를들면 사람객체)가 연결되어 있지는 않을까 두려워 한다. 그렇기 때문에 임의로 동물리모콘에 `원숭이묘기를하다` 버튼을 추가하지 못하는 상황이다. 그래서 자바가 `(원숭이)` 즉 수동형변환을 해주었다. 이 상황에서 자바는 여전히 불안하긴 하지만 그냥 개발자 믿고 컴파일 오류를 발생하지 않는다.
		// - 정답 2
		// -- `a동물` 변수가 `a원숭이2` 변수에게 말한다.
		// -- "`a원숭이2`야 내가 지금 어떤 객체랑 연결되어 있는데, 너도 나랑 같은 객체와 연결되자!"
		// -- `a원숭이2` 변수는 말합니다.
		// -- "나는 오직 원숭이 객체랑만 연결될 수 있는데, 너가 연결되어 있는 객체가 원숭이객체 맞니?"
		// -- `a동물` 변수는 말합니다.
		// -- "나랑 연결되어 있는 객체가 동물객체인건 확실한데.. 그게 원숭이객체 인지 사람객체인지 고릴라객체인지는 알 수 없어. 그래도 원숭이객체일 확률이 있긴 하니까, 그냥 진행하지 않을래? 내 앞에 붙은 `(원숭이)` 이거 보이지? 이거 개발자가 사인 한거야. 개발자님 믿고 그냥 진행하자. 실제로 이게 문제가 되어서 사용자가 이 프로그램을 사용하다가 오류가 난다고 하더라도 우리책임은 아니잖아 ㅎㅎ"
		// -- `a원숭이2`가 말합니다.
		// -- "불안하긴 한데... 개발자님이 생각이 있으시니까 사인하셨겠지, 그냥 진행하자!"
		
		사람 a사람2 = null;
		
		// 문제 4 : 아래 줄의 코드가 수동 형변환 까지 했는데도 안되는 이유 설명
		// a사람2 = (사람)a동물;
		
		// 상황 : `a사람2` 변수는 오직 사람객체랑만 연결 가능 합니다.
		// 상황 : `a동물` 변수는 오직 동물객체랑만 연결 가능 합니다.
		// 상황 : `a동물` 변수는 현재 원숭이객체와 연결되어 있습니다.
		// - 정답 1
		// -- `a동물` 변수가 `a사람2` 변수에게 말한다.
		// -- "`a사람2`야 내가 지금 어떤 객체랑 연결되어 있는데, 너도 나랑 같은 객체와 연결되자!"
		// -- `a사람2` 변수는 말합니다.
		// -- "나는 오직 사람객체랑만 연결될 수 있는데, 너가 연결되어 있는 객체가 사람객체가 맞니?"
		// -- `a동물` 변수는 말합니다.
		// -- "나랑 연결되어 있는 객체가 동물객체인건 확실한데.. 그게 원숭이객체 인지 사람객체인지 고릴라객체인지는 알 수 없어. 그래도 사람객체일 확률이 있긴 하니까, 그냥 진행하지 않을래? 내 앞에 붙은 `(사람)` 이거 보이지? 이거 개발자가 사인 한거야. 개발자님 믿고 그냥 진행하자. 실제로 이게 문제가 되어서 사용자가 이 프로그램을 사용하다가 오류가 난다고 하더라도 우리책임은 아니잖아 ㅎㅎ"
		// -- `a사람2`가 말합니다.
		// -- "불안하긴 한데... 개발자님이 생각이 있으시니까 사인하셨겠지, 그냥 진행하자!"
		// -- 몇일뒤
		// -- 실제로 아래 코드가 실행되었을 때
		// -- `Exception in thread "main" java.lang.ClassCastException: 원숭이 cannot be cast to 사람` 예외가 발생하였습니다.
		// -- `원숭이 cannot be cast to 사람` 는 원숭이 리모콘을 사람 리모콘으로 캐스팅(형변환)하는 게 안된다는 뜻 입니다.(왜냐하면 당연히 안되는 거니까요. 그 이유는 직접 생각해 보세요.)
		// -- 실행 중 문제를 뜻하는 예외(Exception)가 발생해서 고객에게 클레임이 들어왔고 개발자는 선임에게 불려가 혼이 났습니다.
		
	}
}
abstract class 동물 {
	void 숨쉬다() {
		System.out.println("동물이 숨을 쉽니다.");
	}
}
class 사람 extends 동물 {
	void 말하다() {
		System.out.println("사람이 말을 합니다.");
	}
}
class 원숭이 extends 동물 {
	void 원숭이묘기를하다() {
		System.out.println("원숭이묘기를하다.");
	}
}